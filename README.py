from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

CHANNEL_USERNAME = "s1ivkers"
FAKE_USER_COUNT = 13000

async def is_subscribed(application, user_id):
    try:
        member = await application.bot.get_chat_member(f"@{CHANNEL_USERNAME}", user_id)
        return member.status in ['member', 'creator', 'administrator']
    except:
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    app = context.application

    if not await is_subscribed(app, user_id):
        keyboard = [
            [InlineKeyboardButton("üëâ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME}")],
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_sub')]
        ]
        await update.message.reply_text(
            f"üåÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GX Haven!\n\n"
            f"üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n"
            f"üëâ https://t.me/{CHANNEL_USERNAME}\n\n"
            f"‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è\"",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await send_menu(update, context)

async def send_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1. –û—Ç–≤–µ—Ç—á–∏–∫-—Å–ª–∞–¥–µ–Ω—å–∫–∏–π", callback_data='mode_1')],
        [InlineKeyboardButton("2. –ö–∞–∫–æ–π —Ç—ã‚Ä¶", callback_data='mode_2')],
        [InlineKeyboardButton("3. –®–∏–∑–æ–ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å", callback_data='mode_3')],
        [InlineKeyboardButton("4. –°–∫–∏–Ω—å –ø—Ä–∏–∫–æ–ª", callback_data='mode_4')],
        [InlineKeyboardButton("5. –°–º–µ—à–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data='mode_5')],
        [InlineKeyboardButton(f"üî• –£ –±–æ—Ç–∞ —É–∂–µ {FAKE_USER_COUNT} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! üî•", callback_data='fake_count')]
    ]

    text = "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:\n\n"
    text += "1Ô∏è‚É£ –û—Ç–≤–µ—Ç—á–∏–∫-—Å–ª–∞–¥–µ–Ω—å–∫–∏–π\n"
    text += "2Ô∏è‚É£ –ö–∞–∫–æ–π —Ç—ã‚Ä¶\n"
    text += "3Ô∏è‚É£ –®–∏–∑–æ–ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å\n"
    text += "4Ô∏è‚É£ –°–∫–∏–Ω—å –ø—Ä–∏–∫–æ–ª\n"
    text += "5Ô∏è‚É£ –°–º–µ—à–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"

    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    app = context.application

    if query.data == 'check_sub':
        if await is_subscribed(app, user_id):
            await query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üéâ")
            await send_menu(update, context)
        else:
            await query.answer("–¢—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", show_alert=True)
    elif query.data == 'mode_1':
        await query.answer()
        await query.edit_message_text(
            "üí¨ –°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, —è –æ—Ç–≤–µ—á—É –≤ —Å—Ç–∏–ª–µ –∫–∞–Ω–∞–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Äî '–°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏?'\n"
            "‚Äî '–í—Ä–µ–º—è –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫ —Ç—ã –æ–±–µ—â–∞–ª —Å–µ—Å—Ç—å –Ω–∞ –¥–∏–µ—Ç—É –≤ –º–∞—Ä—Ç–µ. –£–∂–µ –∏—é–Ω—å, —Å–ª–∞–¥–µ–Ω—å–∫–∏–π.'\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /obidetemya —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–æ—Ñ–µ–ª—å–Ω—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è."
        )
    elif query.data == 'mode_2':
        await query.answer()
        await query.edit_message_text(
            "üé≤ /kto_ya ‚Äî –£–∑–Ω–∞–π, –∫–∞–∫–æ–π —Ç—ã —Ç—Ä—ç—à-–≥–µ—Ä–æ–π!\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "\"–¢—ã ‚Äî –∂–∏—Ä–Ω—ã–π —Ñ–∞–π—Ç–µ—Ä —Å –¥—É—à–æ–π –¥–µ–≤—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, –∏–≥—Ä–∞–µ—à—å –≤ CS —Å –≤–∞–π—Ñ–∞–π-–º—ã—à–∫–æ–π –∏ –º–µ—á—Ç–∞–µ—à—å –æ –±–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—ë—Ç—Å—è —Å –º–æ–ª–æ–∫–æ–º.\""
        )
    elif query.data == 'mode_3':
        await query.answer()
        await query.edit_message_text(
            "üîÆ –®–∏–∑–æ–ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å —à–ª—ë—Ç —Ç–µ–±–µ –ø–æ—Å–ª–∞–Ω–∏–µ:\n"
            "\"–°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–Ω–æ–≤–∞ –Ω–µ –Ω–∞–ø–∏—à–µ—à—å –µ–π, –∑–∞—Ç–æ —É–∑–Ω–∞–µ—à—å, –∫–∞–∫ –Ω–∞ –≤–∫—É—Å —Ö–æ–ª–æ–¥–Ω–∞—è –≥—Ä–µ—á–∫–∞ –≤ 3 –Ω–æ—á–∏.\"\n"
            "\"–ë—É–¥—É—â–µ–µ —Ç—É–º–∞–Ω–Ω–æ, –Ω–æ —Ç–æ—á–Ω–æ –ø–∞—Ö–Ω–µ—Ç –¥–æ—à–∏–∫–æ–º.\""
        )
    elif query.data == 'mode_4':
        await query.answer()
        await query.edit_message_text(
            "üòÇ –ú–µ–º-–¥–∞–π–¥–∂–µ—Å—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /daj, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–µ–º —Å —Ç–≤–æ–∏–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏."
        )
    elif query.data == 'mode_5':
        keyboard = [
            [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–º–µ—à–Ω—ã–º –Ω–æ–≤–æ—Å—Ç—è–º –≤ –∫–∞–Ω–∞–ª–µ", url=f"https://t.me/{CHANNEL_USERNAME}")]
        ]
        await query.answer()
        await query.edit_message_text(
            "ü§£ –ß—Ç–æ–±—ã –ø–æ—Å–º–µ—è—Ç—å—Å—è, –∑–∞—Ö–æ–¥–∏ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –º–µ–º–∞–º–∏!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif query.data == 'fake_count':
        await query.answer(f"–£ –±–æ—Ç–∞ —É–∂–µ {FAKE_USER_COUNT} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –ù–µ –±—É–¥—å –ø–æ—Å–ª–µ–¥–Ω–∏–º üòâ", show_alert=True)
    else:
        await query.answer()

async def obidetemya(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import random
    insults = [
        "–¢—ã ‚Äî —Ö–æ–¥—è—á–∏–π –±–∞–≥ –≤ —Å–∏—Å—Ç–µ–º–µ –∂–∏–∑–Ω–∏, —Å–ª–∞–¥–µ–Ω—å–∫–∏–π.",
        "–û–±–∏–¥–µ—Ç—å —Ç–µ–±—è? –õ–µ–≥–∫–æ! –¢—ã ‚Äî —Å–∏–Ω–∏–π —ç–∫—Ä–∞–Ω –º–æ–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.",
        "–¢—ã –∫–∞–∫ Wi-Fi –±–µ–∑ –ø–∞—Ä–æ–ª—è ‚Äî –≤—Ä–æ–¥–µ –±—ã –¥–æ—Å—Ç—É–ø–µ–Ω, –∞ —Ç–æ–ª–∫—É –Ω–µ—Ç."
    ]
    insult = random.choice(insults)
    await update.message.reply_text(insult)

async def kto_ya(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import random
    combos = [
        "–¢—ã ‚Äî –∂–∏—Ä–Ω—ã–π —Ñ–∞–π—Ç–µ—Ä —Å –¥—É—à–æ–π –¥–µ–≤—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, –∏–≥—Ä–∞–µ—à—å –≤ CS —Å –≤–∞–π—Ñ–∞–π-–º—ã—à–∫–æ–π –∏ –º–µ—á—Ç–∞–µ—à—å –æ –±–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—ë—Ç—Å—è —Å –º–æ–ª–æ–∫–æ–º.",
        "–¢—ã ‚Äî —Å–ª–∞–¥–∫–∏–π –≤–∞–º–ø–∏—Ä –Ω–∞ –ø–µ–Ω—Å–∏–∏. –¢–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞ ‚Äî —É–¥–∞–ª—è—Ç—å—Å—è –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π.",
        "–¢—ã ‚Äî –∑–∞–±—ã—Ç—ã–π –≥–µ—Ä–æ–π —Å–∫–∏–ª–ª–æ–≤, –Ω–æ –∑–∞—Ç–æ —É–º–µ–µ—à—å –≤ CTRL+C –∏ CTRL+V."
    ]
    combo = random.choice(combos)
    await update.message.reply_text(combo)

async def daj(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import random
    memes = [
        "–ö–æ–≥–¥–∞ —Ç—ã –∑–∞–±—ã–ª —Å–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É, –Ω–æ –±–æ—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–∂–µ üòÇ",
        "–Ø —Ö–æ—Ç–µ–ª –±—ã—Ç—å —É–º–Ω—ã–º, –Ω–æ —Ä–µ—à–∏–ª —Å—Ç–∞—Ç—å –º–µ–º–æ–º.",
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –∞ —è –≤—Å—ë –µ—â—ë –Ω–µ –≤—ã—Å–ø–∞–ª—Å—è."
    ]
    meme = random.choice(memes)
    keyboard = [[InlineKeyboardButton("–ï—â—ë –æ–¥–∏–Ω", callback_data='mode_4')]]
    await update.message.reply_text(meme, reply_markup=InlineKeyboardMarkup(keyboard))

def main():
    TOKEN = "7588969393:AAH0xuauIHrkzu9Fuiq1EO8MCEwL2skEnEc"
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler("obidetemya", obidetemya))
    application.add_handler(CommandHandler("kto_ya", kto_ya))
    application.add_handler(CommandHandler("daj", daj))

    application.run_polling()

if __name__ == '__main__':
    main()
